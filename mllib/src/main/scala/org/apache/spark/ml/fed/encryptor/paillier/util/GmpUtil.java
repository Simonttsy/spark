//package org.apache.spark.ml.fed.encryptor.paillier.util;////import java.math.BigInteger;////public class GmpUtil {////    /**//     * VISIBLE FOR TESTING. Reuse the same buffers over and over to minimize allocations and native//     * boundary crossings.//     *///    static final ThreadLocal<GmpUtil> INSTANCE = new ThreadLocal<GmpUtil>() {//        @Override protected GmpUtil initialValue() {//            return new GmpUtil();//        }//    };//////    public static BigInteger modPowInsecure(BigInteger base, BigInteger exponent,//                                            BigInteger modulus) {//        if (modulus.signum() <= 0) {//            throw new ArithmeticException("modulus must be positive");//        }//        if (base.signum() < 0) {//            throw new IllegalArgumentException("base must be non-negative");//        }//        if (exponent.signum() < 0) {//            throw new IllegalArgumentException("exponent must be non-negative");//        }//        return INSTANCE.get().modPowInsecureImpl(base, exponent, modulus);//    }////////}