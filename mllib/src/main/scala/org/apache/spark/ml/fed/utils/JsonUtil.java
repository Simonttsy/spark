package org.apache.spark.ml.fed.utils;import com.fasterxml.jackson.core.JsonProcessingException;import com.fasterxml.jackson.databind.JsonNode;import com.fasterxml.jackson.databind.ObjectMapper;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.io.IOException;public class JsonUtil {    private static final Logger LOG = LoggerFactory.getLogger(JsonUtil.class);    private static final ObjectMapper MAPPER = new ObjectMapper();    public static <T> T parseJsonNodeTo(JsonNode j, Class<T> event) {        T t = null;        try {            t = MAPPER.treeToValue(j, event);        } catch (JsonProcessingException e) {            LOG.error("de-serialization failed. JsonNode: {}", j.toString());            e.printStackTrace();        }        return t;    }    public static <T> T parseJsonTo(String json, Class<T> event) {        T resultEvent = null;        try {            resultEvent = MAPPER.readValue(json, event);        } catch (IOException e) {            LOG.error("de-serialization failed. Json: {}", json);            e.printStackTrace();        }        return resultEvent;    }    public static Object parseJsonToObject(String json, Class<?> event) {        Object resultEvent = null;        try {            resultEvent = MAPPER.readValue(json, event);        } catch (IOException e) {            LOG.error("de-serialization failed. Json: {}", json);            e.printStackTrace();        }        return resultEvent;    }    public static JsonNode getRootNode(String json) {        JsonNode rootNode = null;        try {            rootNode = MAPPER.readTree(json);        } catch (IOException e) {            LOG.error("de-serialization failed. Json: {}", json);//            throw new RuntimeException(e);        }        return rootNode;    }}